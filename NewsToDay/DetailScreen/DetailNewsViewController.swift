//
//  RandomNewsViewController.swift
//  NewsToDay
//
//  Created by –í–∞–ª–µ–Ω—Ç–∏–Ω–∞ –ü–æ–ø–æ–≤–∞ on 21.10.2024.
//

import UIKit

class DetailNewsViewController: UIViewController {
    
    private let imageView: UIImageView = {
        let imageView = UIImageView()
        imageView.contentMode = .scaleAspectFill
        imageView.clipsToBounds = true
        return imageView
    }()
    
    private let titleLabel: UILabel = {
        let label = UILabel()
        label.font = UIFont.boldSystemFont(ofSize: 24)
        label.numberOfLines = 0
        return label
    }()
    
    private let authorLabel: UILabel = {
        let label = UILabel()
        label.font = UIFont.systemFont(ofSize: 16)
        label.textColor = .gray
        return label
    }()
    
    private let descriptionLabel: UILabel = {
        let label = UILabel()
        label.font = UIFont.systemFont(ofSize: 16)
        label.numberOfLines = 0
        label.lineBreakMode = .byWordWrapping
        return label
    }()
    
    // –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    private let categoryManager = CategoryManager()

    // –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Ç—å—é
    private let newsService = DefaultNetworkService()

    override func viewDidLoad() {
        super.viewDidLoad()
        view.backgroundColor = .white
        setupUI()
    }

    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        checkAndLoadRandomArticle()
    }

    private func setupUI() {
        view.addSubview(imageView)
        view.addSubview(titleLabel)
        view.addSubview(authorLabel)
        view.addSubview(descriptionLabel)

        setupConstraints()
    }

    private func setupConstraints() {
        imageView.translatesAutoresizingMaskIntoConstraints = false
        titleLabel.translatesAutoresizingMaskIntoConstraints = false
        authorLabel.translatesAutoresizingMaskIntoConstraints = false
        descriptionLabel.translatesAutoresizingMaskIntoConstraints = false

        NSLayoutConstraint.activate([
            imageView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),
            imageView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            imageView.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            imageView.heightAnchor.constraint(equalToConstant: 200),

            titleLabel.topAnchor.constraint(equalTo: imageView.bottomAnchor, constant: 16),
            titleLabel.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 16),
            titleLabel.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -16),

            authorLabel.topAnchor.constraint(equalTo: titleLabel.bottomAnchor, constant: 8),
            authorLabel.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 16),
            authorLabel.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -16),

            descriptionLabel.topAnchor.constraint(equalTo: authorLabel.bottomAnchor, constant: 16),
            descriptionLabel.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 16),
            descriptionLabel.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -16),
            descriptionLabel.bottomAnchor.constraint(lessThanOrEqualTo: view.bottomAnchor, constant: -16)
        ])
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –∑–∞–≥—Ä—É–∑–∫–∞ —Å–ª—É—á–∞–π–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏
    private func checkAndLoadRandomArticle() {
        if categoryManager.selectedCellIndex.isEmpty {
            categoryManager.showAlertNoCategories(vc: self)
        } else {
            // –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
            let selectedCategoryIndex = categoryManager.selectedCellIndex.randomElement()!
            let selectedCategory = categoryManager.all[selectedCategoryIndex].name
            
            loadRandomArticle(category: selectedCategory)
        }
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ª—É—á–∞–π–Ω–æ–π —Å—Ç–∞—Ç—å–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    private func loadRandomArticle(category: String) {
        let request = TopHeadlinesRequest(category: Category(name: category, icon: "üìà"), page: 1)

        newsService.request(request) { [weak self] result in
            switch result {
            case .success(let articles):
                if let randomArticle = articles!.randomElement() {
                    DispatchQueue.main.async {
                        self?.displayArticle(randomArticle)
                    }
                }
            case .failure(let error):
                DispatchQueue.main.async {
                    self?.handleError(error)
                }
            }
        }
    }

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
    private func displayArticle(_ article: News) {
        titleLabel.text = article.title
        authorLabel.text = "–ê–≤—Ç–æ—Ä: \(article.author ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")"
        descriptionLabel.text = article.description

        if let imageUrlString = article.urlToImage {
            loadImage(from: imageUrlString)
        }
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ URL —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º ImageClient
    private func loadImage(from url: String) {
        ImageClient.shared.setImage(from: url, placeholderImage: nil) { [weak self] image in
            DispatchQueue.main.async {
                self?.imageView.image = image
            }
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö
    private func handleError(_ error: Error) {
        let alert = UIAlertController(title: "–û—à–∏–±–∫–∞", message: error.localizedDescription, preferredStyle: .alert)
        alert.addAction(UIAlertAction(title: "–û–∫", style: .default, handler: nil))
        present(alert, animated: true, completion: nil)
    }
}
